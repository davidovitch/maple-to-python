Rrho=Matrix([[cos(rho),0,-sin(rho)],[0,1,0],[sin(rho),0,cos(rho)]])
Rpsi1=Matrix([[-cos(psi),sin(psi),0],[-sin(psi),-cos(psi),0],[0,0,1]])
Rbeta1=Matrix([[cos(beta1),0,-sin(beta1)],[0,1,0],[sin(beta1),0,cos(beta1)]])
Rpsi2=Matrix([[cos(psi),-sin(psi),0],[sin(psi),cos(psi),0],[0,0,1]])
Rbeta2=Matrix([[cos(beta2),0,-sin(beta2)],[0,1,0],[sin(beta2),0,cos(beta2)]])
omegarho=VectorRow([0,rhoflux,0])
omegarho1=Multiply(omegarho,Multiply(Transpose(Rpsi1),Transpose(Rbeta1)))
omegaOmega1=Multiply(VectorRow([0,0,-Omega]),Transpose(Rbeta1))
omegabeta1=VectorRow([0,betaflux1,0])
omega1=VectorAdd(VectorAdd(omegarho1,omegaOmega1),omegabeta1)
p_omega1=omega11
q_omega1=omega12
r_omega1=omega13
omegarho2=Multiply(omegarho,Multiply(Transpose(Rpsi2),Transpose(Rbeta2)))
omegaOmega2=Multiply(VectorRow([0,0,-Omega]),Transpose(Rbeta2))
omegabeta2=VectorRow([0,betaflux2,0])
omega2=VectorAdd(VectorAdd(omegarho2,omegaOmega2),omegabeta2)
p_omega2=omega21
q_omega2=omega22
r_omega2=omega23
OmegaXomegarho=Matrix([[0,0,-rhoflux],[0,0,0],[rhoflux,0,0]])
OmegaXomega1=Matrix([[0,r_omega1,-q_omega1],[-r_omega1,0,p_omega1],[q_omega1,-p_omega1,0]])
OmegaXomega2=Matrix([[0,r_omega2,-q_omega2],[-r_omega2,0,p_omega2],[q_omega2,-p_omega2,0]])
r_2=VectorRow
r_0=VectorRow
r_cg_beta=VectorRow
r_cg_T=VectorRow
r_3_beta_1=VectorRow([(-e*cos(psi)),(e*sin(psi)),0])
r_3_beta_2=VectorRow([(e*cos(psi)),(-e*sin(psi)),0])
r_3_beta_1_flux=VectorRow([(e*sin(psi)*psiflux),(e*cos(psi)*psiflux),0])
r_3_beta_2_flux=VectorRow([(-e*sin(psi)*psiflux),(-e*cos(psi)*psiflux),0])
R_cg_beta_1=Multiply(r_0,Transpose(Rrho))
R_cg_beta_2=Multiply(r_0,Transpose(Rrho))
R_cg_T=Multiply(r_0,Transpose(Rrho))
R_cg_beta_1_flux=Multiply(r_2,OmegaXomegarho)
R_cg_beta_2_flux=Multiply(r_2,OmegaXomegarho)
R_cg_T_flux=Multiply(r_cg_T,OmegaXomegarho)
JB=(1/12)*m_b*R*R
Jblade=Matrix([[0,0,0],[0,JB,0],[0,0,JB]])
JT=(1/12)*m_t*(l/2)*(l/2)
Jtower=Matrix([[0,0,0],[0,JT,0],[0,0,JT]])
T_blade_1=0.5*m_b*((R_cg_beta_1_flux1*R_cg_beta_1_flux1)+(R_cg_beta_1_flux2*R_cg_beta_1_flux2)+(R_cg_beta_1_flux3*R_cg_beta_1_flux3))
T_blade_2=0.5*m_b*((R_cg_beta_2_flux1*R_cg_beta_2_flux1)+(R_cg_beta_2_flux2*R_cg_beta_2_flux2)+(R_cg_beta_2_flux3*R_cg_beta_2_flux3))
T_tower=0.5*m_t*((R_cg_T_flux1*R_cg_T_flux1)+(R_cg_T_flux2*R_cg_T_flux2)+(R_cg_T_flux3*R_cg_T_flux3))
D_blade_1=Multiply(omega1,Jblade)
D_blade_2=Multiply(omega2,Jblade)
D_tower=Multiply(omegarho,Jtower)
T_rot_blade_1=0.5*((D_blade_11*omega11)+(D_blade_12*omega12)+(D_blade_13*omega13))
T_rot_blade_2=0.5*((D_blade_21*omega21)+(D_blade_22*omega22)+(D_blade_23*omega23))
T_rot_tower=0.5*((D_tower1*omegarho1)+(D_tower2*omegarho2)+(D_tower3*omegarho3))
T_total=T_blade_1+T_blade_2+T_tower+T_rot_blade_1+T_rot_blade_2+T_rot_tower
T_total=T_blade_1+T_blade_2+T_tower+T_rot_blade_1+T_rot_blade_2+T_rot_tower
g=VectorRow([g_,0,0])
R_cg_blade_1_0=r_0+Multiply
R_cg_blade_2_0=r_0+Multiply
R_cg_T_0=r_0+Multiply
V_g=(m_b*g1*(R_cg_blade_1_01+R_cg_blade_2_01))+(m_t*g1*R_cg_T_01)
V_springs=1/2*kb*beta1*beta1+1/2*kb*beta2*beta2+1/2*ka*rho*rho
V_total=V_g+V_springs
V_total=V_g+V_springs
dT_dbeta1flux=diff(T_total,betaflux1)
dT_dbeta1=diff(T_total,beta1)
dV_dbeta1=diff(V_total,beta1)
dT_dbeta1_t=subs
dV_dbeta1_t=subs
dT_dbeta1flux_t=subs
dT_dbeta1_tt=subs
dV_dbeta1_tt=subs
dT_dbeta1flux_tt=subs
dT_dbeta1flux_tt=subs
dT_dbeta1flux_tt=convert(dT_dbeta1flux_tt,horner)
ddt_dT_dbeta1flux=diff(dT_dbeta1flux_tt,t)
ddt_dT_dbeta1flux=diff(dT_dbeta1flux_tt,t)
ddt_dT_dbeta1flux=convert(ddt_dT_dbeta1flux,horner)
eq_beta1full=ddt_dT_dbeta1flux-dT_dbeta1_tt+dV_dbeta1_tt
eq_beta1full=ddt_dT_dbeta1flux-dT_dbeta1_tt+dV_dbeta1_tt
eq_beta1full=convert(eq_beta1full,horner)
eq_beta1full=solve(eq_beta1full,diff(beta1(t),t,t))
T1_eq_beta1full=subs
T2_eq_beta1full=subs
T3_eq_beta1full=subs
bb_FF_1=T3_eq_beta1full
dT_dbeta2flux=diff(T_total,betaflux2)
dT_dbeta2=diff(T_total,beta2)
dV_dbeta2=diff(V_total,beta2)
dT_dbeta2_t=subs
dV_dbeta2_t=subs
dT_dbeta2flux_t=subs
dT_dbeta2_tt=subs
dV_dbeta2_tt=subs
dT_dbeta2flux_tt=subs
dT_dbeta2flux_tt=subs
dT_dbeta2flux_tt=convert(dT_dbeta2flux_tt,horner)
ddt_dT_dbeta2flux=diff(dT_dbeta2flux_tt,t)
ddt_dT_dbeta2flux=diff(dT_dbeta2flux_tt,t)
ddt_dT_dbeta2flux=convert(ddt_dT_dbeta2flux,horner)
eq_beta2full=ddt_dT_dbeta2flux-dT_dbeta2_tt+dV_dbeta2_tt
eq_beta2full=ddt_dT_dbeta2flux-dT_dbeta2_tt+dV_dbeta2_tt
eq_beta2full=convert(eq_beta2full,horner)
eq_beta2full=solve(eq_beta2full,diff(beta2(t),t,t))
T1_eq_beta2full=subs
T2_eq_beta2full=subs
T3_eq_beta2full=subs
bb_FF_2=T3_eq_beta2full
dT_drhoflux=diff(T_total,rhoflux)
dT_drhoflux=diff(T_total,rhoflux)
dT_drho=diff
dV_drho=diff(V_total,rho)
dT_drho_t=subs
dV_drho_t=subs
dT_drhoflux_t=subs
dT_drho_tt=subs
dV_drho_tt=subs
dT_drhoflux_tt=subs
dT_drhoflux_tt=subs
ddt_dT_drhoflux=diff(dT_drhoflux_tt,t)
ddt_dT_drhoflux=diff(dT_drhoflux_tt,t)
eq_rhofull=ddt_dT_drhoflux-dT_drho_tt+dV_drho_tt
eq_rhofull=ddt_dT_drhoflux-dT_drho_tt+dV_drho_tt
eq_rhofull=solve(eq_rhofull,diff(rho(t),t,t))
eq_rhofull=solve(eq_rhofull,diff(rho(t),t,t))
eq_rhofull=convert(eq_rhofull,horner)
T1_eq_rhofull=subs
T1_eq_rhofull=subs
T2_eq_rhofull=subs
T3_eq_rhofull=subs
T3_eq_rhofull=subs
T3_eq_rhofull=collect(T3_eq_rhofull,aa_FF)
T3_eq_rhofull=collect(T3_eq_rhofull,aa_FF)
T4_eq_rhofull=solve
T4_eq_rhofull=solve
T5_eq_rhofull=convert(T4_eq_rhofull,horner)
T5_eq_rhofull=convert(T4_eq_rhofull,horner)
eq_mo_beta1_FF_lin=subs
eq_mo_beta1_FF_lin=subs
eq_mo_beta2_FF_lin=subs
eq_mo_beta2_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
eq_mo_rho_FF_lin=subs
