> R[rho] := Matrix([[cos(rho),0,-sin(rho)],[0,1,0],[sin(rho),0,cos(rho)]]);
> R[psi[1]] := Matrix([[-cos(psi),sin(psi),0],[-sin(psi),-cos(psi),0],[0,0,1]]);
> R[beta[1]] := Matrix([[cos(beta[1]),0,-sin(beta[1])],[0,1,0],[sin(beta[1]),0,cos(beta[1])]]);
> R[psi[2]] := Matrix([[cos(psi),-sin(psi),0],[sin(psi),cos(psi),0],[0,0,1]]);
> R[beta[2]] := Matrix([[cos(beta[2]),0,-sin(beta[2])],[0,1,0],[sin(beta[2]),0,cos(beta[2])]]);
> omega[rho] := Vector[row]([0,rho[flux],0]);
> omega[rho[1]] := Multiply(omega[rho],Multiply(Transpose(R[psi[1]]),Transpose(R[beta[1]])));
> omega[Omega[1]] := Multiply(Vector[row]([0,0,-Omega]),Transpose(R[beta[1]]));
> omega[beta[1]] := Vector[row]([0,beta[flux[1]],0]);
> omega[1] := VectorAdd(VectorAdd(omega[rho[1]],omega[Omega[1]]), omega[beta[1]]);
> p_omega[1]:=omega[1][1];
> q_omega[1]:=omega[1][2];
> r_omega[1]:=omega[1][3];
> omega[rho[2]] := Multiply(omega[rho],Multiply(Transpose(R[psi[2]]),Transpose(R[beta[2]])));
> omega[Omega[2]] := Multiply(Vector[row]([0,0,-Omega]),Transpose(R[beta[2]]));
> omega[beta[2]] := Vector[row]([0,beta[flux[2]],0]);
> omega[2] := VectorAdd(VectorAdd(omega[rho[2]],omega[Omega[2]]), omega[beta[2]]);
> p_omega[2]:=omega[2][1];
> q_omega[2]:=omega[2][2];
> r_omega[2]:=omega[2][3];
> Omega[Xomega[rho]]:=Matrix([[0,0,-rho[flux]],[0,0,0],[rho[flux],0,0]]);
> Omega[Xomega[1]]:=Matrix([[0,r_omega[1],-q_omega[1]],[-r_omega[1],0,p_omega[1]],[q_omega[1],-p_omega[1],0]]);
> Omega[Xomega[2]]:=Matrix([[0,r_omega[2],-q_omega[2]],[-r_omega[2],0,p_omega[2]],[q_omega[2],-p_omega[2],0]]);
> r_2 := Vector[row]([l/2,0,0]);
> r_0 := Vector[row]([l/2,0,0]);
> r_cg_beta := Vector[row]([R/2,0,0]);
> r_cg_T := Vector[row]([l/4,0,0]);
> r_3_beta_1 := Vector[row]([(-e*cos(psi)),(e*sin(psi)),0]);
> r_3_beta_2 := Vector[row]([(e*cos(psi)),(-e*sin(psi)),0]);
> r_3_beta_1_flux := Vector[row]([(e*sin(psi)*psi[flux]),(e*cos(psi)*psi[flux]),0]);
> r_3_beta_2_flux := Vector[row]([(-e*sin(psi)*psi[flux]),(-e*cos(psi)*psi[flux]),0]);
> R_cg_beta_1 := Multiply(r_0,Transpose(R[rho])) + r_2 + r_3_beta_1 + Multiply(r_cg_beta,Multiply(R[beta[1]],R[psi[1]]));
> R_cg_beta_2 := Multiply(r_0,Transpose(R[rho])) + r_2 + r_3_beta_2 + Multiply(r_cg_beta,Multiply(R[beta[2]],R[psi[2]]));
> R_cg_T := Multiply(r_0,Transpose(R[rho])) + r_cg_T;
> R_cg_beta_1_flux := Multiply(r_2,Omega[Xomega[rho]]) + Multiply(r_3_beta_1,Omega[Xomega[rho]]) + r_3_beta_1_flux + Multiply(r_cg_beta,Multiply(Omega[Xomega[1]],Multiply(R[beta[1]],R[psi[1]])));
> R_cg_beta_2_flux := Multiply(r_2,Omega[Xomega[rho]]) + Multiply(r_3_beta_2,Omega[Xomega[rho]]) + r_3_beta_2_flux + Multiply(r_cg_beta,Multiply(Omega[Xomega[2]],Multiply(R[beta[2]],R[psi[2]])));
> R_cg_T_flux := Multiply(r_cg_T,Omega[Xomega[rho]]);
> JB = (1/12)*m_b*R*R;
> J[blade] := Matrix([[0,0,0],[0,JB,0],[0,0,JB]]);
> JT = (1/12)*m_t*(l/2)*(l/2);
> J[tower] := Matrix([[0,0,0],[0,JT,0],[0,0,JT]]);
> T_blade_1 := 0.5*m_b*((R_cg_beta_1_flux[1]*R_cg_beta_1_flux[1])+(R_cg_beta_1_flux[2]*R_cg_beta_1_flux[2])+(R_cg_beta_1_flux[3]*R_cg_beta_1_flux[3]));
> T_blade_2 := 0.5*m_b*((R_cg_beta_2_flux[1]*R_cg_beta_2_flux[1])+(R_cg_beta_2_flux[2]*R_cg_beta_2_flux[2])+(R_cg_beta_2_flux[3]*R_cg_beta_2_flux[3]));
> T_tower := 0.5*m_t*((R_cg_T_flux[1]*R_cg_T_flux[1])+(R_cg_T_flux[2]*R_cg_T_flux[2])+(R_cg_T_flux[3]*R_cg_T_flux[3]));
> D_blade_1 := Multiply(omega[1],J[blade]);
> D_blade_2 := Multiply(omega[2],J[blade]);
> D_tower := Multiply(omega[rho],J[tower]);
> T_rot_blade_1 := 0.5*((D_blade_1[1]*omega[1][1])+(D_blade_1[2]*omega[1][2])+(D_blade_1[3]*omega[1][3]));
> T_rot_blade_2 := 0.5*((D_blade_2[1]*omega[2][1])+(D_blade_2[2]*omega[2][2])+(D_blade_2[3]*omega[2][3]));
> T_rot_tower := 0.5*((D_tower[1]*omega[rho][1])+(D_tower[2]*omega[rho][2])+(D_tower[3]*omega[rho][3]));
> T_total := T_blade_1 + T_blade_2 + T_tower + T_rot_blade_1 + T_rot_blade_2 + T_rot_tower;
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> g := Vector[row]([g_,0,0]);
> R_cg_blade_1_0 := r_0 + Multiply(r_2,R[rho]) + Multiply(r_3_beta_1,R[rho]) + Multiply(r_cg_beta,Multiply(R[beta[1]],Multiply(R[psi[1]],R[rho])));
> R_cg_blade_2_0 := r_0 + Multiply(r_2,R[rho]) + Multiply(r_3_beta_2,R[rho]) + Multiply(r_cg_beta,Multiply(R[beta[2]],Multiply(R[psi[2]],R[rho])));
> R_cg_T_0 := r_0 + Multiply(r_cg_T,R[rho]);
> V_g := (m_b*g[1]*(R_cg_blade_1_0[1] + R_cg_blade_2_0[1]))+(m_t*g[1]*R_cg_T_0[1]);
> V_springs := 1/2*kb*beta[1]*beta[1]+1/2*kb*beta[2]*beta[2]+1/2*ka*rho*rho;
> V_total := V_g + V_springs;
> `starting length` = length(V_total), `converting to horner`=length(convert(V_total,horner)),  factoring=length(factor(V_total)), `simplify length` = length(symplify(V_total));
> dT_dbeta1flux := diff(T_total, beta[flux[1]]);
> dT_dbeta1 := diff(T_total, beta[1]);
> dV_dbeta1 := diff(V_total, beta[1]);
> dT_dbeta1_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_dbeta1);
> dV_dbeta1_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dV_dbeta1);
> dT_dbeta1flux_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_dbeta1flux);
> dT_dbeta1_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_dbeta1_t);
> dV_dbeta1_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dV_dbeta1_t);
> dT_dbeta1flux_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_dbeta1flux_t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> dT_dbeta1flux_tt := convert(dT_dbeta1flux_tt, horner);
> ddt_dT_dbeta1flux := diff(dT_dbeta1flux_tt, t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> ddt_dT_dbeta1flux := convert(ddt_dT_dbeta1flux, horner);
> eq_beta1[full] := ddt_dT_dbeta1flux - dT_dbeta1_tt + dV_dbeta1_tt = 0;
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> eq_beta1[full]:= convert(eq_beta1[full], horner);
> eq_beta1[full] := solve(eq_beta1[full],diff(beta[1](t),t,t));
> T1_eq_beta1[full]:= subs({diff(beta[1](t),t,t)=bb_FF_1,diff(beta[2](t),t,t)=bb_FF_2,diff(rho(t),t,t)=aa_FF},eq_beta1[full]);
> T2_eq_beta1[full]:= subs({diff(beta[1](t),t)=bb_F_1,diff(beta[2](t),t)=bb_F_2, diff(rho(t),t)=aa_F},T1_eq_beta1[full]);
> T3_eq_beta1[full] := subs({beta[1](t)=bb_1, beta[2](t)=bb_2, rho(t)=aa, Omega=om},T2_eq_beta1[full]);
> bb_FF_1 := T3_eq_beta1[full];
> dT_dbeta2flux := diff(T_total, beta[flux[2]]);
> dT_dbeta2 := diff(T_total, beta[2]);
> dV_dbeta2 := diff(V_total, beta[2]);
> dT_dbeta2_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_dbeta2);
> dV_dbeta2_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dV_dbeta2);
> dT_dbeta2flux_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_dbeta2flux);
> dT_dbeta2_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_dbeta2_t);
> dV_dbeta2_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dV_dbeta2_t);
> dT_dbeta2flux_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_dbeta2flux_t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> dT_dbeta2flux_tt := convert(dT_dbeta2flux_tt, horner);
> ddt_dT_dbeta2flux := diff(dT_dbeta2flux_tt, t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> ddt_dT_dbeta2flux := convert(ddt_dT_dbeta2flux,horner);
> eq_beta2[full] := ddt_dT_dbeta2flux - dT_dbeta2_tt + dV_dbeta2_tt = 0;
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> eq_beta2[full] := convert(eq_beta2[full],horner);
> eq_beta2[full] := solve(eq_beta2[full],diff(beta[2](t),t,t));
> T1_eq_beta2[full]:= subs({diff(diff(beta[1](t),t),t)=bb_FF_1,diff(diff(beta[2](t),t),t)=bb_FF_2,diff(diff(rho(t),t),t)=aa_FF},eq_beta2[full]);
> T2_eq_beta2[full]:= subs({diff(beta[1](t),t)=bb_F_1,diff(beta[2](t),t)=bb_F_2, diff(rho(t),t)=aa_F},T1_eq_beta2[full]);
> T3_eq_beta2[full] := subs({beta[1](t)=bb_1, beta[2](t)=bb_2, rho(t)=aa, Omega=om},T2_eq_beta2[full]);
> bb_FF_2 := T3_eq_beta2[full];
> dT_drhoflux := diff(T_total, rho[flux]);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> dT_drho := diff(subs(rho[flux]=rho_f,T_total), rho);
> dV_drho := diff(V_total, rho);
> dT_drho_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_drho);
> dV_drho_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dV_drho);
> dT_drhoflux_t := subs({beta[flux[1]]=beta[flux[1]](t),beta[flux[2]]=beta[flux[2]](t),rho[flux]=rho[flux](t), psi[flux]=Omega, beta[1]=beta[1](t), beta[2]=beta[2](t), rho=rho(t), psi=Omega*t},dT_drhoflux);
> dT_drho_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_drho_t);
> dV_drho_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dV_drho_t);
> dT_drhoflux_tt := subs({beta[flux[1]](t)=diff(beta[1](t),t),beta[flux[2]](t)=diff(beta[2](t),t),rho[flux](t)=diff(rho(t),t)},dT_drhoflux_t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> ddt_dT_drhoflux := diff(dT_drhoflux_tt, t);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> eq_rho[full] := ddt_dT_drhoflux - dT_drho_tt + dV_drho_tt = 0;
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> eq_rho[full] := solve(eq_rho[full],diff(rho(t),t,t));
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> eq_rho[full] := convert(eq_rho[full], horner);
> T1_eq_rho[full]:= subs({diff(diff(beta[1](t),t),t)=bb_FF_1,diff(diff(beta[2](t),t),t)=bb_FF_2,diff(diff(rho(t),t),t)=aa_FF},eq_rho[full]);
> length(%);
> T2_eq_rho[full]:= subs({diff(beta[1](t),t)=bb_F_1,diff(beta[2](t),t)=bb_F_2, diff(rho(t),t)=aa_F},T1_eq_rho[full]);
> T3_eq_rho[full] := subs({beta[1](t)=bb_1, beta[2](t)=bb_2, rho(t)=aa, Omega=om},T2_eq_rho[full]);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> T3_eq_rho[full] := collect(T3_eq_rho[full], aa_FF);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> T4_eq_rho[full] := solve(T3_eq_rho[full]=aa_FF, aa_FF);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> T5_eq_rho[full] := convert(T4_eq_rho[full], horner);
> length(%);
> eq_mo_beta1_FF_lin := subs({sin(bb_1)=bb_1, sin(bb_2)=bb_2, cos(bb_1)=1, cos(bb_2)=1, cos(aa)=1,sin(aa)=aa},bb_FF_1);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%)), `simplify length` = length(symplify(%));
> eq_mo_beta2_FF_lin := subs({sin(bb_1)=bb_1, sin(bb_2)=bb_2, cos(bb_1)=1, cos(bb_2)=1, cos(aa)=1,sin(aa)=aa},bb_FF_2);
> `starting length` = length(%), `converting to horner`=length(convert(%,horner)),  factoring=length(factor(%));
> eq_mo_rho_FF_lin := subs({sin(bb_1)=bb_1, sin(bb_2)=bb_2, cos(bb_1)=1, cos(bb_2)=1, cos(aa)=1,sin(aa)=aa},T5_eq_rho[full]);
> Matlab(T5_eq_rho[full], resultname="aa_FF");
> Matlab(eq_mo_rho_FF_lin, resultname="aa_FF_lin");
> Matlab(bb_FF_1, resultname="bb_FF_1");
> Matlab(eq_mo_beta1_FF_lin, resultname="bb_FF_1_lin");
> Matlab(bb_FF_2, resultname="bb_FF_2");
> Matlab(eq_mo_beta2_FF_lin, resultname="bb_FF_2_lin");

